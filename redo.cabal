name:                redo
version:             0.0.0
synopsis:
    A recursive build system that is both simpler and superior to make.
description:
    Install from the [git repository](https://github.com/Zankoku-Okuno/redo) with cabal (or stack).
    .
    > git clone https://github.com/Zankoku-Okuno/redo.git
    > cd redo
    > cabal build
    > sudo cabal install
    .
    To enable redo for a project, use @redo-init@ at the top-level project folder.
    To rebuild a target file @sna.foo@, invoke @redo sna.foo@.
    To rebuild only when necessary, invoke @redo-ifchange sna.foo@.
    Redo builds a target like @sna.foo@ by looking for a build script @sna.foo.do@ or @default.foo@ script (called a do-script) which is sister to the target;
    it then runs that script, which should generate the target.
    If @redo@ or @redo-ifchange@ is called from the build script, then those subsequent targets are marked as dependencies for the first.
    You can pass multiple files to the various redo commands, and it will redo all of them.
    .
    For each file you pass in, redo will look for a do-script, which contains the instructions for building the file.
    It will then run that script, redirecting stdout to a temporary file, and when it completes successfully, the newly-generated file will be moved into place, overwriting any older version only after we know we have a good result.
    The script is called with three arguments:
    1) the empty string (possibly the name of the target file in the future), 
    2) the basename (extension removed) of the target file, 
    3) the name of the temporary file.
    .
    A do-script might require other files to also be regenerated.
    The best thing to do is to call @redo-ifchange@ from the do-script.
    The difference from @redo@ is that the ifchange version will skip any files that are already up-to-date.
    .
    How does redo track whether a file needs to be rebuilt?
    Let's say you run @redo@ on a file which we'll call the \"parent\".
    When the parent's build script calls @redo@ on some files, which we'll call the \"children\", the children are registered as dependencies for the parent.
    When you next run @redo-ifchange@ on the parent, all the dependency information from the last run will be used to check if any (transitive) dependency was altered.
    If there was no change, then we don't run the do-script, and you get an incremental build.
license:             BSD3
license-file:        LICENSE
author:              Zankoku Okuno
maintainer:          zankoku.okuno@gmail.com
-- copyright:           
category:            Build
build-type:          Simple
-- extra-source-files:  
cabal-version:       >=1.10


library
  hs-source-dirs: src/
  exposed-modules:
    Distribution.Redo,
    Distribution.Redo.Hash,
    Distribution.Redo.Util
  other-modules:
    Distribution.Redo.Monad,
    Distribution.Redo.Env
  build-depends:
    base >=4.8 && <5,
    base16-bytestring ==0.1.*,
    bytestring ==0.10.*,
    cryptohash ==0.11.*,
    directory >=1.2 && <2,
    filepath >=1.3 && <2,
    mtl ==2.*,
    process ==1.*,
    sqlite-simple ==0.4.*,
    text ==1.*
  default-language: Haskell2010
  default-extensions:
    LambdaCase,
    OverloadedStrings,
    RecordWildCards,
    ScopedTypeVariables,
    ViewPatterns
  other-extensions:
    GeneralizedNewtypeDeriving,
    MultiParamTypeClasses


executable redo
  hs-source-dirs: app/
  main-is: Always.hs
  other-modules: Algorithm
  build-depends:
    base,
    process,
    redo
  default-language: Haskell2010
  default-extensions: LambdaCase

executable redo-always
  hs-source-dirs: app/
  main-is: Always.hs
  other-modules: Algorithm
  build-depends:
    base,
    process,
    redo
  default-language: Haskell2010
  default-extensions: LambdaCase

executable redo-ifchange
  hs-source-dirs: app/
  main-is: IfChange.hs
  other-modules: Algorithm
  build-depends:
    base,
    process,
    redo
  default-language: Haskell2010
  default-extensions: LambdaCase

executable redo-init
  hs-source-dirs: app/
  main-is: Init.hs
  -- other-modules:
  build-depends:
    base,
    filepath,
    directory,
    redo
  default-language: Haskell2010

executable redo-clean
  hs-source-dirs: app/
  main-is: Clean.hs
  -- other-modules:
  build-depends:
    base,
    redo
  default-language: Haskell2010


test-suite test-redo
  hs-source-dirs: test
  type: exitcode-stdio-1.0
  main-is: test.hs
  build-depends:
    base,
    redo,
    regex-compat >=0.90 && <1,
    shelly >=1.6 && <2,
    text >=1.0 && <2
  default-language: Haskell2010
  default-extensions:
    ExtendedDefaultRules,
    OverloadedStrings


source-repository head
  type: git
  location: https://github.com/Zankoku-Okuno/redo.git